apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

android {
    buildFeatures {
        buildConfig true
    }
    defaultConfig {
        namespace 'co.omise.android'
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode omise_sdk_code_version
        versionName omise_sdk_version
        compileSdk compile_sdk_version
        buildConfigField "int", "VERSION_CODE", "$omise_sdk_code_version"
        buildConfigField "String", "VERSION_NAME", "\"$omise_sdk_version\""
        buildConfigField "String", "NETCETERA_API_KEY", "\"${System.getenv('NETCETERA_API_KEY')}\""
        buildConfigField "String", "SCHEME_NAME", "\"${System.getenv('SCHEME_NAME')}\""
        buildConfigField "String", "DS_ID", "\"${System.getenv('DS_ID')}\""
        buildConfigField "String", "MESSAGE_VERSION", "\"${System.getenv('MESSAGE_VERSION')}\""
        buildConfigField "String", "ACS_REF_NUMBER", "\"${System.getenv('ACS_REF_NUMBER')}\""
        buildConfigField "String", "DS_PUBLIC_KEY", "\"${System.getenv('DS_PUBLIC_KEY')}\""
        testInstrumentationRunner "co.omise.android.OmiseTestRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions += "mode"
    productFlavors {
        production {
            dimension "mode"
        }
        staging {
            dimension "mode"
        }
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage' // okio
    }

    androidExtensions {
        experimental = true
    }

    testOptions {
        // It's required for Sonar
        reportDir "${project.buildDir}/reports/coverage/androidTest/production/debug/connected"

        unitTests {
            animationsDisabled true
            returnDefaultValues true
            includeAndroidResources true
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
        // issue with agp > 8 so we had to add this line https://github.com/Kotlin/kotlinx.serialization/issues/2145
        freeCompilerArgs = ["-Xstring-concat=inline"]
    }
    android {
        sourceSets {
            String sharedTestDir = "$projectDir/src/sharedTest/java"
            test {
                java.srcDir sharedTestDir
            }
            androidTest {
                java.srcDir sharedTestDir
            }
        }
    }
}

publishing {
    publications {
        release(MavenPublication) {
            setGroupId 'co.omise'
            setArtifactId 'omise-android'
            version android.defaultConfig.versionName
            project.afterEvaluate {
                artifact bundleProductionReleaseAar
            }
            pom {
                name = 'Omise Android SDK'
                description = 'Android SDK for Omise API'
                url = 'https://www.omise.co'
                withXml {
                    def dependenciesNode = asNode('').appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified" == it.name) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
                scm {
                    connection = 'scm:git:git://git.github.com/omise/omise-android'
                    developerConnection = 'scm:git:git://git.github.com/omise/omise-android'
                    url = 'https://github.com/omise/omise-android'
                }
                developers {
                    developer {
                        id = 'natthawut'
                        name = 'Natthawut Haematulin'
                        email = 'natthawut@omise.co'
                    }
                }
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            def ossrhUsername = System.getenv("SONATYPE_USERNAME")
            def ossrhPassword = System.getenv("SONATYPE_PASSWORD")
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    def signingKey = System.getenv("PGP_SIGNING_KEY")
    def signingPassword = System.getenv("PGP_SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.release
}

dependencies {
    implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    api "joda-time:joda-time:$joda_time_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:$joda_time_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    // Required by Netcetera, check https://3dss.netcetera.com/3dssdk/doc/2.10.0/android-error-handling error [1322]
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.69'

    debugImplementation("androidx.fragment:fragment-testing:$fragment_testing_version") {
        exclude group: 'androidx.test', module: 'core'
    }

    testImplementation project(":testsupport")
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "androidx.test:rules:$test_version"
    testImplementation "androidx.test:runner:$test_version"
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-web:$espresso_version"
    testImplementation "androidx.test.ext:junit:$junit_ext_version"
    testImplementation "androidx.annotation:annotation:$annotation_version"
    testImplementation "androidx.arch.core:core-testing:$arch_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    androidTestImplementation "androidx.annotation:annotation:$annotation_version"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"
    androidTestImplementation "org.robolectric:annotations:$robolectric_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "androidx.arch.core:core-testing:$arch_version"
    androidTestImplementation "androidx.test:rules:$test_version"
    androidTestImplementation "androidx.test:runner:$test_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiautomator_version"
    androidTestImplementation "com.github.tmurakami:dexopener:$dexopener_version"
    implementation project(':3ds-sdk')

    // Netcetera 3SD SDK
    implementation "org.slf4j:slf4j-api:1.7.36"
    implementation "com.github.tony19:logback-android:1.3.0-3"
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}
// Use locally to generate full report
// TODO: Fix flaky tests so that this can be used in CI to reflect full coverage
tasks.create(name: 'jacocoTestReport', type: JacocoReport, dependsOn: ['testProductionDebugUnitTest', 'lint', 'createProductionDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    // Main source code
    sourceDirectories.from = file("${project.projectDir}/src/main/java")
    classDirectories.from = files(fileTree(
            // Generated Kotlin classes
            dir: "${project.buildDir}/tmp/kotlin-classes/productionDebug",
            // Exclude generated code
            excludes: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]
    ))
    executionData.from = fileTree(dir: project.buildDir, includes: [
            // Execution data for unit tests
            '**/*.exec',
            // Execution data for instrumentation tests
            '**/*.ec'
    ])
}
// Use in CI to coverage generate report without instrumentation testing
tasks.create(name: 'jacocoUnitTestReport', type: JacocoReport, dependsOn: ['compileProductionDebugAndroidTestJavaWithJavac','generateProductionDebugAndroidTestBuildConfig','checkProductionDebugAndroidTestAarMetadata','mergeProductionDebugAndroidTestResources','processProductionDebugAndroidTestManifest','testProductionDebugUnitTest', 'lint']) {
    reports {
        xml.required = true
        html.required = true
    }

    // Main source code
    sourceDirectories.from = file("${project.projectDir}/src/main/java")
    classDirectories.from = files(fileTree(
            // Generated Kotlin classes
            dir: "${project.buildDir}/tmp/kotlin-classes/productionDebug",
            // Exclude generated code
            excludes: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]
    ))
    executionData.from = fileTree(dir: project.buildDir, includes: [
            // Execution data for unit tests
            '**/*.exec',
            // Execution data for instrumentation tests
            // '**/*.ec' // Removed to exclude instrumentation tests
    ])
}

sonar {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'omise'
        property 'sonar.projectName', 'omise-android'
        property 'sonar.projectKey', 'omise_omise-android'
        // TODO: Change to the correct path once the instrumentation tests are not flaky
        property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco/jacocoUnitTestReport/jacocoUnitTestReport.xml"
        property 'sonar.junit.reportPaths', "${project.buildDir}/test-results/testProductionDebugUnitTest"
        property 'sonar.androidLint.reportPaths', "${project.buildDir}/reports/lint-results-productionDebug.xml"
    }

    ktlint {
        android = true
        reporters {
            reporter "checkstyle"
        }
    }
}
